<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linuxes on blog</title>
    <link>https://blog.er1c.dev/linux/</link>
    <description>Recent content in Linuxes on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Aug 2020 22:34:28 +0800</lastBuildDate>
    
	<atom:link href="https://blog.er1c.dev/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>get-data-from-product-instance</title>
      <link>https://blog.er1c.dev/linux/nc_and_pv/</link>
      <pubDate>Tue, 18 Aug 2020 22:34:28 +0800</pubDate>
      
      <guid>https://blog.er1c.dev/linux/nc_and_pv/</guid>
      <description>如何从线上机器拉取数据 最近遇到了一些线上问题，希望能够把线上抓到的信息拉到本地处理。 实现的方式有很多，比如利用python开启一个http server等。
但是我还是偏好使用较为广泛、各种发行版自带的命令来实现。
辗转中了解到nc指令以及可以用来限流的pv指令，两者结合，可以满足绝大部分网络拷贝的场景。
how-to 作为how-to系列的特色，开篇就会提供一个可用的方案。
在线上机器执行，会监听1220端口，并把数据发送到该链接上。
cat data_file | nc -N -l 1220 在本地上执行，连接到线上机器，并把数据写入到local_data_file。
nc -d ip_or_hostname 1220 &amp;gt; local_data_file 1. 如何让双方在数据发送完成后都退出？  发送方使用-N选项，表示如果读入EOF就关闭链接，这样就可以在文件全写入之后退出。 接受方使用-d选项，表示忽略stdin，所以如果链接关闭，就会退出。  有其他实现方式的讨论，参见参考。
2. 如何控制流量，避免线上机器的网卡、带宽被打满？ 这个问题可以转化为“如何控制管道中的数据传输速度？”，那么考虑使用pv指令。
pv可能需要安装,如 apt install pv
pv -L 1k data_file | nc -N -l 1220 # 限制传输速度1KB/s nc  arbitrary TCP and UDP connections and listens
 手册上，netcat的简介暗示了这是一个很强大的网络向的指令。
nc能够
 发起TCP链接，发送UDP包 作为服务端，监听任意端口 进行端口扫描 支持IPv4和IPv6  用法 nc [-46bCDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl] [-m minttl] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s source] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]] [-Z peercertfile] [destination] [port] 基础用法：建立TCP连接与传输数据  指定是客户端还是服务端  使用 -l 参数来指定本次运行是作为客户端，还是作为服务端监听端口。</description>
    </item>
    
  </channel>
</rss>